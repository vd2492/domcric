{"ast":null,"code":"import { loadCSVData } from '../utils/csvParser';\nimport { players as staticPlayers } from '../data/players';\nclass PlayerDataService {\n  constructor() {\n    this.players = [];\n    this.lastUpdateTime = 0;\n    this.updateInterval = 5 * 60 * 1000;\n    // 5 minutes\n    this.listeners = [];\n    this.loadData();\n    // Set up periodic updates\n    setInterval(() => {\n      this.loadData();\n    }, this.updateInterval);\n  }\n  async loadData() {\n    try {\n      // Try to load CSV data first\n      const csvPlayers = await loadCSVData();\n      if (csvPlayers.length > 0) {\n        this.players = csvPlayers;\n        console.log(`Loaded ${csvPlayers.length} players from CSV`);\n      } else {\n        // Fallback to static data\n        this.players = staticPlayers;\n        console.log(`Loaded ${staticPlayers.length} players from static data`);\n      }\n      this.lastUpdateTime = Date.now();\n      this.notifyListeners();\n    } catch (error) {\n      console.error('Error loading player data:', error);\n      // Fallback to static data\n      this.players = staticPlayers;\n      this.notifyListeners();\n    }\n  }\n  getPlayers() {\n    return this.players;\n  }\n  getPlayersByCategory(category) {\n    return this.players.filter(player => player.category === category);\n  }\n  getLastUpdateTime() {\n    return this.lastUpdateTime;\n  }\n  forceRefresh() {\n    return this.loadData();\n  }\n  subscribe(listener) {\n    this.listeners.push(listener);\n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.players));\n  }\n}\n\n// Create singleton instance\nexport const playerDataService = new PlayerDataService();","map":{"version":3,"names":["loadCSVData","players","staticPlayers","PlayerDataService","constructor","lastUpdateTime","updateInterval","listeners","loadData","setInterval","csvPlayers","length","console","log","Date","now","notifyListeners","error","getPlayers","getPlayersByCategory","category","filter","player","getLastUpdateTime","forceRefresh","subscribe","listener","push","index","indexOf","splice","forEach","playerDataService"],"sources":["C:/Users/VASUDEV UTTHARAHALLI/OneDrive/Desktop/domcric/src/services/playerDataService.ts"],"sourcesContent":["import { Player } from '../types';\r\nimport { loadCSVData } from '../utils/csvParser';\r\nimport { players as staticPlayers } from '../data/players';\r\n\r\nclass PlayerDataService {\r\n  private players: Player[] = [];\r\n  private lastUpdateTime: number = 0;\r\n  private updateInterval: number = 5 * 60 * 1000; // 5 minutes\r\n  private listeners: ((players: Player[]) => void)[] = [];\r\n\r\n  constructor() {\r\n    this.loadData();\r\n    // Set up periodic updates\r\n    setInterval(() => {\r\n      this.loadData();\r\n    }, this.updateInterval);\r\n  }\r\n\r\n  private async loadData() {\r\n    try {\r\n      // Try to load CSV data first\r\n      const csvPlayers = await loadCSVData();\r\n      if (csvPlayers.length > 0) {\r\n        this.players = csvPlayers;\r\n        console.log(`Loaded ${csvPlayers.length} players from CSV`);\r\n      } else {\r\n        // Fallback to static data\r\n        this.players = staticPlayers;\r\n        console.log(`Loaded ${staticPlayers.length} players from static data`);\r\n      }\r\n      this.lastUpdateTime = Date.now();\r\n      this.notifyListeners();\r\n    } catch (error) {\r\n      console.error('Error loading player data:', error);\r\n      // Fallback to static data\r\n      this.players = staticPlayers;\r\n      this.notifyListeners();\r\n    }\r\n  }\r\n\r\n  public getPlayers(): Player[] {\r\n    return this.players;\r\n  }\r\n\r\n  public getPlayersByCategory(category: string): Player[] {\r\n    return this.players.filter(player => player.category === category);\r\n  }\r\n\r\n  public getLastUpdateTime(): number {\r\n    return this.lastUpdateTime;\r\n  }\r\n\r\n  public forceRefresh(): Promise<void> {\r\n    return this.loadData();\r\n  }\r\n\r\n  public subscribe(listener: (players: Player[]) => void): () => void {\r\n    this.listeners.push(listener);\r\n    // Return unsubscribe function\r\n    return () => {\r\n      const index = this.listeners.indexOf(listener);\r\n      if (index > -1) {\r\n        this.listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  private notifyListeners() {\r\n    this.listeners.forEach(listener => listener(this.players));\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nexport const playerDataService = new PlayerDataService(); "],"mappings":"AACA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,SAASC,OAAO,IAAIC,aAAa,QAAQ,iBAAiB;AAE1D,MAAMC,iBAAiB,CAAC;EAMtBC,WAAWA,CAAA,EAAG;IAAA,KALNH,OAAO,GAAa,EAAE;IAAA,KACtBI,cAAc,GAAW,CAAC;IAAA,KAC1BC,cAAc,GAAW,CAAC,GAAG,EAAE,GAAG,IAAI;IAAE;IAAA,KACxCC,SAAS,GAAoC,EAAE;IAGrD,IAAI,CAACC,QAAQ,CAAC,CAAC;IACf;IACAC,WAAW,CAAC,MAAM;MAChB,IAAI,CAACD,QAAQ,CAAC,CAAC;IACjB,CAAC,EAAE,IAAI,CAACF,cAAc,CAAC;EACzB;EAEA,MAAcE,QAAQA,CAAA,EAAG;IACvB,IAAI;MACF;MACA,MAAME,UAAU,GAAG,MAAMV,WAAW,CAAC,CAAC;MACtC,IAAIU,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;QACzB,IAAI,CAACV,OAAO,GAAGS,UAAU;QACzBE,OAAO,CAACC,GAAG,CAAC,UAAUH,UAAU,CAACC,MAAM,mBAAmB,CAAC;MAC7D,CAAC,MAAM;QACL;QACA,IAAI,CAACV,OAAO,GAAGC,aAAa;QAC5BU,OAAO,CAACC,GAAG,CAAC,UAAUX,aAAa,CAACS,MAAM,2BAA2B,CAAC;MACxE;MACA,IAAI,CAACN,cAAc,GAAGS,IAAI,CAACC,GAAG,CAAC,CAAC;MAChC,IAAI,CAACC,eAAe,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD;MACA,IAAI,CAAChB,OAAO,GAAGC,aAAa;MAC5B,IAAI,CAACc,eAAe,CAAC,CAAC;IACxB;EACF;EAEOE,UAAUA,CAAA,EAAa;IAC5B,OAAO,IAAI,CAACjB,OAAO;EACrB;EAEOkB,oBAAoBA,CAACC,QAAgB,EAAY;IACtD,OAAO,IAAI,CAACnB,OAAO,CAACoB,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACF,QAAQ,KAAKA,QAAQ,CAAC;EACpE;EAEOG,iBAAiBA,CAAA,EAAW;IACjC,OAAO,IAAI,CAAClB,cAAc;EAC5B;EAEOmB,YAAYA,CAAA,EAAkB;IACnC,OAAO,IAAI,CAAChB,QAAQ,CAAC,CAAC;EACxB;EAEOiB,SAASA,CAACC,QAAqC,EAAc;IAClE,IAAI,CAACnB,SAAS,CAACoB,IAAI,CAACD,QAAQ,CAAC;IAC7B;IACA,OAAO,MAAM;MACX,MAAME,KAAK,GAAG,IAAI,CAACrB,SAAS,CAACsB,OAAO,CAACH,QAAQ,CAAC;MAC9C,IAAIE,KAAK,GAAG,CAAC,CAAC,EAAE;QACd,IAAI,CAACrB,SAAS,CAACuB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACjC;IACF,CAAC;EACH;EAEQZ,eAAeA,CAAA,EAAG;IACxB,IAAI,CAACT,SAAS,CAACwB,OAAO,CAACL,QAAQ,IAAIA,QAAQ,CAAC,IAAI,CAACzB,OAAO,CAAC,CAAC;EAC5D;AACF;;AAEA;AACA,OAAO,MAAM+B,iBAAiB,GAAG,IAAI7B,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
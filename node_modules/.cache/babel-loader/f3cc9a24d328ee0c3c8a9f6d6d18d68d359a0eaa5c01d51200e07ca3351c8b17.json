{"ast":null,"code":"import Papa from 'papaparse';\nimport { PlayerCategory, PlayerSubCategory } from '../types';\nexport const parseCSVData = csvText => {\n  const results = Papa.parse(csvText, {\n    header: true,\n    skipEmptyLines: true\n  });\n  const players = [];\n  const seenPlayers = new Set(); // Track seen players to avoid duplicates\n  let playerId = 1;\n  results.data.forEach(row => {\n    const csvPlayer = row;\n\n    // Skip rows with empty player names\n    if (!csvPlayer.Player || csvPlayer.Player.trim() === '') {\n      return;\n    }\n\n    // Create unique key for player to avoid duplicates\n    const playerKey = `${csvPlayer.Player.trim()}-${csvPlayer.Team.trim()}`;\n    if (seenPlayers.has(playerKey)) {\n      return; // Skip duplicate\n    }\n    seenPlayers.add(playerKey);\n\n    // Determine category and subcategory based on Role\n    const {\n      category,\n      subCategory\n    } = getCategoryFromRole(csvPlayer.Role);\n\n    // Create player object\n    const player = {\n      id: `p${playerId++}`,\n      name: csvPlayer.Player.trim(),\n      team: csvPlayer.Team.trim(),\n      performance: {\n        matches: parseInt(csvPlayer.Mat) || 0,\n        runs: parseInt(csvPlayer.Runs) || 0,\n        wickets: parseInt(csvPlayer.Wickets) || 0,\n        battingAverage: parseFloat(csvPlayer.Avg) || 0,\n        strikeRate: parseFloat(csvPlayer.SR) || 0,\n        economy: parseFloat(csvPlayer.ER) || 0\n      },\n      category,\n      subCategory\n    };\n\n    // Attach extra stats for PlayerCard\n    player.role = csvPlayer.Role || '';\n    player.csvStats = {\n      '5W+': csvPlayer['5W+'],\n      '3W+': csvPlayer['3W+'],\n      '100': csvPlayer['100'],\n      '50': csvPlayer['50'],\n      '4s': csvPlayer['4s'],\n      '6s': csvPlayer['6s']\n    };\n\n    // Add keeper-specific stats if applicable\n    if (category === PlayerCategory.KEEPER) {\n      player.performance.catches = 0; // Default value, not in CSV\n      player.performance.stumpings = 0; // Default value, not in CSV\n    }\n\n    // Add bowling average for bowlers and all-rounders\n    if (category === PlayerCategory.BOWLER || category === PlayerCategory.ALLROUNDER) {\n      player.performance.bowlingAverage = parseFloat(csvPlayer.Avg) || 0;\n    }\n    players.push(player);\n  });\n  return players;\n};\nconst getCategoryFromRole = role => {\n  const roleLower = role.toLowerCase();\n\n  // Wicketkeeper\n  if (roleLower.includes('wicketkeeper') || roleLower.includes('keeper')) {\n    return {\n      category: PlayerCategory.KEEPER\n    };\n  }\n\n  // Batsman\n  if (roleLower.includes('batsman') || roleLower.includes('bat')) {\n    return {\n      category: PlayerCategory.OPENING_BATTER\n    };\n  }\n\n  // All-rounders\n  if (roleLower.includes('all-rounder') || roleLower.includes('allrounder')) {\n    if (roleLower.includes('spin') || roleLower.includes('orthodox') || roleLower.includes('leg') || roleLower.includes('offbreak')) {\n      return {\n        category: PlayerCategory.ALLROUNDER,\n        subCategory: PlayerSubCategory.SPINNER_ALLROUNDER\n      };\n    } else {\n      return {\n        category: PlayerCategory.ALLROUNDER,\n        subCategory: PlayerSubCategory.FAST_BOWLING_ALLROUNDER\n      };\n    }\n  }\n\n  // Bowlers\n  if (roleLower.includes('bowler') || roleLower.includes('bowling')) {\n    if (roleLower.includes('spin') || roleLower.includes('orthodox') || roleLower.includes('leg') || roleLower.includes('offbreak') || roleLower.includes('wrist spin')) {\n      return {\n        category: PlayerCategory.BOWLER,\n        subCategory: PlayerSubCategory.SPINNER\n      };\n    } else {\n      return {\n        category: PlayerCategory.BOWLER,\n        subCategory: PlayerSubCategory.FAST_BOWLER\n      };\n    }\n  }\n\n  // Default to batsman if role is unclear\n  return {\n    category: PlayerCategory.OPENING_BATTER\n  };\n};\nexport const loadCSVData = async () => {\n  try {\n    const response = await fetch('/players.csv');\n    const csvText = await response.text();\n    return parseCSVData(csvText);\n  } catch (error) {\n    console.error('Error loading CSV data:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["Papa","PlayerCategory","PlayerSubCategory","parseCSVData","csvText","results","parse","header","skipEmptyLines","players","seenPlayers","Set","playerId","data","forEach","row","csvPlayer","Player","trim","playerKey","Team","has","add","category","subCategory","getCategoryFromRole","Role","player","id","name","team","performance","matches","parseInt","Mat","runs","Runs","wickets","Wickets","battingAverage","parseFloat","Avg","strikeRate","SR","economy","ER","role","csvStats","KEEPER","catches","stumpings","BOWLER","ALLROUNDER","bowlingAverage","push","roleLower","toLowerCase","includes","OPENING_BATTER","SPINNER_ALLROUNDER","FAST_BOWLING_ALLROUNDER","SPINNER","FAST_BOWLER","loadCSVData","response","fetch","text","error","console"],"sources":["C:/Users/VASUDEV UTTHARAHALLI/OneDrive/Desktop/domcric/src/utils/csvParser.ts"],"sourcesContent":["import Papa from 'papaparse';\r\nimport { Player, PlayerCategory, PlayerSubCategory } from '../types';\r\n\r\nexport interface CSVPlayer {\r\n  No: string;\r\n  Player: string;\r\n  Team: string;\r\n  Wickets: string;\r\n  Mat: string;\r\n  Inns: string;\r\n  Avg: string;\r\n  SR: string;\r\n  ER: string;\r\n  '5W+': string;\r\n  '3W+': string;\r\n  Maiden: string;\r\n  Runs: string;\r\n  HS: string;\r\n  '100': string;\r\n  '50': string;\r\n  '4s': string;\r\n  '6s': string;\r\n  Role: string;\r\n}\r\n\r\nexport const parseCSVData = (csvText: string): Player[] => {\r\n  const results = Papa.parse(csvText, {\r\n    header: true,\r\n    skipEmptyLines: true,\r\n  });\r\n\r\n  const players: Player[] = [];\r\n  const seenPlayers = new Set<string>(); // Track seen players to avoid duplicates\r\n  let playerId = 1;\r\n\r\n  results.data.forEach((row: any) => {\r\n    const csvPlayer = row as CSVPlayer;\r\n    \r\n    // Skip rows with empty player names\r\n    if (!csvPlayer.Player || csvPlayer.Player.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    // Create unique key for player to avoid duplicates\r\n    const playerKey = `${csvPlayer.Player.trim()}-${csvPlayer.Team.trim()}`;\r\n    if (seenPlayers.has(playerKey)) {\r\n      return; // Skip duplicate\r\n    }\r\n    seenPlayers.add(playerKey);\r\n\r\n    // Determine category and subcategory based on Role\r\n    const { category, subCategory } = getCategoryFromRole(csvPlayer.Role);\r\n    \r\n    // Create player object\r\n    const player: Player = {\r\n      id: `p${playerId++}`,\r\n      name: csvPlayer.Player.trim(),\r\n      team: csvPlayer.Team.trim(),\r\n      performance: {\r\n        matches: parseInt(csvPlayer.Mat) || 0,\r\n        runs: parseInt(csvPlayer.Runs) || 0,\r\n        wickets: parseInt(csvPlayer.Wickets) || 0,\r\n        battingAverage: parseFloat(csvPlayer.Avg) || 0,\r\n        strikeRate: parseFloat(csvPlayer.SR) || 0,\r\n        economy: parseFloat(csvPlayer.ER) || 0,\r\n      },\r\n      category,\r\n      subCategory,\r\n    };\r\n\r\n    // Attach extra stats for PlayerCard\r\n    (player as any).role = csvPlayer.Role || '';\r\n    (player as any).csvStats = {\r\n      '5W+': csvPlayer['5W+'],\r\n      '3W+': csvPlayer['3W+'],\r\n      '100': csvPlayer['100'],\r\n      '50': csvPlayer['50'],\r\n      '4s': csvPlayer['4s'],\r\n      '6s': csvPlayer['6s'],\r\n    };\r\n\r\n    // Add keeper-specific stats if applicable\r\n    if (category === PlayerCategory.KEEPER) {\r\n      player.performance.catches = 0; // Default value, not in CSV\r\n      player.performance.stumpings = 0; // Default value, not in CSV\r\n    }\r\n\r\n    // Add bowling average for bowlers and all-rounders\r\n    if (category === PlayerCategory.BOWLER || category === PlayerCategory.ALLROUNDER) {\r\n      player.performance.bowlingAverage = parseFloat(csvPlayer.Avg) || 0;\r\n    }\r\n\r\n    players.push(player);\r\n  });\r\n\r\n  return players;\r\n};\r\n\r\nconst getCategoryFromRole = (role: string): { category: PlayerCategory; subCategory?: PlayerSubCategory } => {\r\n  const roleLower = role.toLowerCase();\r\n  \r\n  // Wicketkeeper\r\n  if (roleLower.includes('wicketkeeper') || roleLower.includes('keeper')) {\r\n    return { category: PlayerCategory.KEEPER };\r\n  }\r\n  \r\n  // Batsman\r\n  if (roleLower.includes('batsman') || roleLower.includes('bat')) {\r\n    return { category: PlayerCategory.OPENING_BATTER };\r\n  }\r\n  \r\n  // All-rounders\r\n  if (roleLower.includes('all-rounder') || roleLower.includes('allrounder')) {\r\n    if (roleLower.includes('spin') || roleLower.includes('orthodox') || roleLower.includes('leg') || roleLower.includes('offbreak')) {\r\n      return { \r\n        category: PlayerCategory.ALLROUNDER, \r\n        subCategory: PlayerSubCategory.SPINNER_ALLROUNDER \r\n      };\r\n    } else {\r\n      return { \r\n        category: PlayerCategory.ALLROUNDER, \r\n        subCategory: PlayerSubCategory.FAST_BOWLING_ALLROUNDER \r\n      };\r\n    }\r\n  }\r\n  \r\n  // Bowlers\r\n  if (roleLower.includes('bowler') || roleLower.includes('bowling')) {\r\n    if (roleLower.includes('spin') || roleLower.includes('orthodox') || roleLower.includes('leg') || roleLower.includes('offbreak') || roleLower.includes('wrist spin')) {\r\n      return { \r\n        category: PlayerCategory.BOWLER, \r\n        subCategory: PlayerSubCategory.SPINNER \r\n      };\r\n    } else {\r\n      return { \r\n        category: PlayerCategory.BOWLER, \r\n        subCategory: PlayerSubCategory.FAST_BOWLER \r\n      };\r\n    }\r\n  }\r\n  \r\n  // Default to batsman if role is unclear\r\n  return { category: PlayerCategory.OPENING_BATTER };\r\n};\r\n\r\nexport const loadCSVData = async (): Promise<Player[]> => {\r\n  try {\r\n    const response = await fetch('/players.csv');\r\n    const csvText = await response.text();\r\n    return parseCSVData(csvText);\r\n  } catch (error) {\r\n    console.error('Error loading CSV data:', error);\r\n    return [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}